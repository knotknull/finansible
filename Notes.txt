
Slides:
GITHUB for Ansible Lightbulb: https://github.com/ansible/lightbulb
https://github.com/ansible/lightbulb/decks

Ansible Essentials Deck:
http://lightbulb.rhdemo.io/decks/ansible-essentials.html#/

Intro to Tower Deck:
http://lightbulb.rhdemo.io/decks/intro-to-ansible-tower.html

Lab Guide:
http://ansible.redhatgov.io/standard/core/index.html
http://ansible.redhatgov.io/standard/core/exercise1.6.html

Tower Download:
http://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-latest.tar.gz

You may want to run these commands on your control node to download Ansible Tower directly with wget:

sudo yum -y install wget
wget http://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-latest.tar.gz

4 Node NFR Lightbulb license is here:
http://lightbulb.rhdemo.io/ansible_tower_license.txt


## Ansible Resources
##


Install Ansible
http://docs.ansible.com/ansible/intro_installation.html

Ansible Tower Free Trial
https://www.ansible.com/tower-trial

Ansible and Ansible Tower Documentation
http://docs.ansible.com/

Ansible Quick Start Guide
https://www.ansible.com/get-started

Ansible Videos
https://www.ansible.com/videos

Webinars and Training
https://www.ansible.com/webinars-training

Ansible Blog
https://www.ansible.com/blog

Ansible In Depth
https://www.ansible.com/ansible-in-depth-whitepaper

Ansible Examples
https://github.com/ansible/ansible-examples

Ansible Essentials Presentation Deck
http://ansible.redhatgov.io/decks/ansible-essentials.html#/

Intro to Ansible Tower Presentation Deck
http://ansible.redhatgov.io/decks/intro-to-ansible-tower.html#/






Student 5 details:

[all:vars]
ansible_user=
ansible_ssh_pass=

ansible_port=22

[web]
node-1 ansible_host=54.173.16.96
node-2 ansible_host=107.22.39.5

[control]
control ansible_host=52.207.84.34

http://nj-student5.rhdemo.io:8080

#######################################################################
##
## Workshop Notes
##
#######################################################################

https://galaxy.ansible.com

Oreilly book:
Ansible up & running

modules
plugins

## inventory
##
inventory: collection of hosts (nodes) associated data and groupings

 - hosts (nodes)
 - groups
 - inventory-specific data (variables)
 - static / dynamic sources

inventory example:

 [control]
 control ansible_host=10.42.0.2

 [web]
 node-[1:3] ansible_host=10.42.0.[6:8]

 [haproxy]
 haproxy ansible_host=10.42.0.100

 [all:vars]
 ansible_user=vagrant
 ansible_ssh_private_key_file=~/.vagrant.d/insecure_private_key



## ad-hoc
##
ad-hoc commands: single Ansible task to perform quickly, but don't want to
                 save for later

-m MODULE_NAME, --module-name=MODULE_NAME
                 Module name to execute the ad-hoc command
-a MODULE_ARGS, --args=MODULE_ARGS
                 Module arguments for the ad-hoc command

-b, --become     Run ad-hoc command with elevated rights such as sudo,
                 the default method

-e EXTRA_VARS, --extra-vars=EXTRA_VARS
                 Set additional variables as key=value or YAML/JSON

--version        Display the version of Ansible

--help           Display the MAN page for the ansible tool

# check all my inventory hosts are ready to be
# managed by Ansible
$ ansible all -m ping

# collect and display the discovered facts
# for the localhost
$ ansible localhost -m setup

# run the uptime command on all hosts in the
# web group
$ ansible web -m command -a "uptime"

NOTE:  Can use powerbroker

## Configuration file: .ansible.cfg
##

[student5@ip-172-48-8-93 ~]$ cat .ansible.cfg
[defaults]
connection = smart
timeout = 60
forks = 10
inventory = ~student5/lightbulb/lessons/lab_inventory/
host_key_checking = False



## Variables
##
Ansible can work with metadata from various sources and manage their
context in the form of variables.

 - Command line parameters
 - Plays and tasks
 - Files
 - Inventory
 - Discovered facts
 - Roles

 Variable Precedence

 The order in which the same variable from different sources will override each other.

 extra vars                            registered vars
 task vars (only for the task)         host facts
 block vars (only for tasks in block)  playbook host_vars
 role and include vars                 playbook group_vars
 play vars_files                       inventory host_vars
 play vars_prompt                      inventory group_vars
 play vars                             inventory vars
 set_facts                             role defaults



##  Tasks: perform a specific unit of work
##

  - file: A directory should exist
  - yum: A package should be installed
  - service: A service should be running
  - template: Render a configuration file from a template
  - get_url: Fetch an archive file from a URL
  - git: Clone a source code repository

## Handler: special tasks that run at the end of a play if notified
##          by another task when a change occurs.
##

tasks:
- name: httpd package is present
  yum:
    name: httpd
    state: latest
  notify: restart httpd

- name: latest index.html file is present
  copy:
    src: files/index.html
    dest: /var/www/html/

handlers:
- name: restart httpd
  service:
    name: httpd
    state: restarted

## Plays / Playbooks
##
Plays are ordered sets of tasks to execute against host selections from
your inventory.

NOTE: Playbook associated with a hosts

A playbook is a file containing one or more plays.


## Name: Human readable name
##

- name: install and start apache
  hosts: web
  become: yes
  vars:
    http_port: 80

  tasks:
  - name: httpd package is present
    yum:
      name: httpd
      state: latest


## Host Selector: hosts:
##
---
- name: install and start apache
  hosts: web
  become: yes
  vars:
    http_port: 80


## Privilege Escalation: become:
##
---
- name: install and start apache
  hosts: web
  become: yes
  vars:
    http_port: 80


## Play Variables:  vars:
##
---
- name: install and start apache
  hosts: web
  become: yes
  vars:
    http_port: 80

## Tasks:  tasks:  module names (yum, copy, service)
##
---
- name: install and start apache
  hosts: web
  become: yes
  vars:
    http_port: 80

  tasks:
  - name: latest httpd package is present
    yum:
      name: httpd
      state: latest

  - name: latest index.html file is present
    copy:
      src: files/index.html
      dest: /var/www/html/

  - name: httpd is started
    service:
      name: httpd
      state: started





playbook:  A playbook can have multiple plays and a play can
           have one or multiple tasks.
play    :  The goal of a play is to map a group of hosts.
task    :  The goal of a task is to implement modules against those hosts.



##  To run a playbook
##
##  -i <file_name>  inventory file
##  -k query for password

> ansible-playbook -i ./hosts -k install_apache.yml



## Templates    ( {{}} )
##
Ansible embeds the Jinja2 templating engine that can be used to dynamically:

 - Set and modify play variables
 - Conditional logic
 - Generate files such as configurations from variables


## Loops:  (with_items:)
##
Loops can do one task on multiple things, such as create a lot of users,
install a lot of packages, or repeat a polling step until a certain result
is reached

- yum:
    name: "{{ item }}"
    state: latest
  with_items:
  - httpd
  - mod_wsgi



## Conditionals:  (when:)
##
Ansible supports the conditional execution of a task based on the
run-time evaluation of variable, fact, or previous task result
(when:)

- yum:
    name: httpd
    state: latest
  when: ansible_os_family == "RedHat"


## Tags: can run playbooks by certain tags only  (tags:)
##
- yum:
    name: "{{ item }}"
    state: latest
  with_items:
  - httpd
  - mod_wsgi
  tags:
     - packages

 - template:
     src: templates/httpd.conf.j2
     dest: /etc/httpd/conf/httpd.conf
  tags:
     - configuration



## Blocks: groups together multiple tasks / logical grouping of tasks
##  ( -block: )
- block:
  - yum:
      name: "{{ item }}"
      state: latest
    with_items:
    - httpd
    - mod_wsgi

  - template:
      src: templates/httpd.conf.j2
      dest: /etc/httpd/conf/httpd.conf
  when: ansible_os_family == "RedHat"



## Roles: packages of closely related Ansible content
##

 - Improves readability and maintainability of complex plays
 - Eases sharing, reuse and standardization of automation processes
 - Enables Ansible content to exist independently of playbooks, projects
       -- even organizations
 - Provides functional conveniences such as file path resolution
   and default values

NOTE: Roles conform to specific directory structure!!
      Role name must match directory name.
        i.e.  roles/common/tasks/main.yml

site.yml
roles/
   common/
     files/
     templates/
     tasks/
     handlers/
     vars/
     defaults/
     meta/
   apache/
     files/
     templates/
     tasks/
     handlers/
     vars/
     defaults/
     meta/

> cat site.yml
---
- hosts: web
  roles:
    - common
    - apache


## galaxy.ansible.com:  shared playbooks
##
NOTE: can initiate a new role w/ ansible-galaxy

> mkdir roles
> cd roles
> ansible-galaxy init apache-simple


> directory structer of ansible tool using roles

tree apache_basic_playbook/
apache_basic_playbook/
├── roles
│   └── apache-simple
│       ├── defaults
│       │   └── main.yml
│       ├── handlers
│       │   └── main.yml
│       ├── meta
│       │   └── main.yml
│       ├── README.md
│       ├── tasks
│       │   └── main.yml
│       ├── templates
│       │   ├── httpd.conf.j2
│       │   └── index.html.j2
│       └── vars
│           └── main.yml
├── site.yml
└── site.yml.bkup

8 directories, 10 files

> cat site.yml

---
- hosts: all
  name: This is my role-based playbook
  become: yes

  roles:
    - apache-simple



####################################################################
## Ansible Tower
####################################################################



What is Ansible Tower?

Ansible Tower is an enterprise framework for controlling, securing and
managing your Ansible automation – with a UI and RESTful API

Role-based access control keeps environments secure, and teams efficient
Non-privileged users can safely deploy entire applications with push-button
deployment access
All Ansible automations are centrally logged, ensuring complete
auditability and compliance


## Key Features of Ansible Tower:
##
 - Dashboard and User Interface
 - User Base -- Organizations, Teams & Users
 - Credentials
 - Inventories
 - Projects
 - Job Templates & Jobs
 - Role Based Access Control (RBAC)


##  User Base
##

A user is an account to access Tower and its services given
  the permissions granted to it.
An organization is a logical collection of users, teams, projects,
  inventories and more. All entities belong to an organization with the exception of users.
Teams provide a means to implement role-based access control schemes
  and delegate responsibilities across organizations.


##  Credentials
##
Credentials are utilized by Tower for authentication with various
 external resources:
  - Connecting to remote machines to run jobs
  - Syncing with inventory sources
  - Importing project content from version control systems
  - Connecting to and managing networking devices
  - Centralized management of various credentials allows end users
   to leverage a secret without ever exposing that secret to them.

NOTE: Tower as credential vault


##  Inventory
##

Inventory is a collection of hosts (nodes) with associated data and groupings
that Tower can connect to and manage.
 - Hosts (nodes)
 - Groups
 - Inventory-specific data (variables)
 - Static or dynamic sources


##  Projects:  source playbooks from a repository
##
Projects

A Project is a logical collection of Ansible Playbooks, represented in Tower.
You can manage Playbooks and Playbook directories by placing them in a
source code management system supported by Tower, including:
 - Git
 - Subversion
 - Mercurial


##  Job Templates  ( group parameters for a playbook )
##

A job template is a definition and set of parameters for running an
Ansible Playbook.

Job templates are useful to execute the same job many times and encourage
the reuse of Ansible Playbook content and collaboration between teams.



## Jobs
##

- A job is an instance of Tower launching an Ansible Playbook against an
inventory of hosts.
- Job results can be easily viewed
- View the standard out for a more in-depth look

## Role Based Access Control (RBAC)
##

Role-Based Access Controls (RBAC) are built into Ansible Tower and
allow administrators to delegate access to server inventories,
organizations, and more. These controls allow Tower to help you
increase security and streamline management of your Ansible automation.


NOTE:  Can cache FACTS about inventory so you do not have to grap info
from the machine for each run.




Ansible Tower > Template > Workflow

Can chain playbooks into "workflows"

Rest API (swagger like)

NOTE: Tower license is per node.



Notifications: email, sms, etc.







##
